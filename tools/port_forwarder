#!/usr/bin/env python
#
# Authors: Joseph Astier, Adarsh Pyarelal
# Date: 2020 October
#
# Single Port Forwarder.  This script will manage forwarding one
# port from this machine to a destination machine, by starting an ssh
# process that will maintain the port forwarding in the background.
#
# The following actions are supported:
#
# start    Start forwarding the port
#
# stop     Stop forwarding the port
#
# status   Report the status of the port
#
#
# Required arguments:
#
# -d Destination, either a hostname or IPV4/IPV6 address
#
# -p Port to be forwarded to the destination machine
#
# -a 'start', 'stop', or 'status'
#

import argparse
import subprocess

# define some handy globals
START  = 'start'
STOP   = 'stop'
STATUS = 'status'
parser = argparse.ArgumentParser()

# Configure argument parser
parser.add_argument(
    '-d', type=str, required=True,
    help='Host, either a hostname or IP address'
)
parser.add_argument(
    '-p', type=int, nargs='+', required=True,
    help='Port numbers to forward'
)
parser.add_argument(
    '-a', type=str, required=True, choices=(START, STOP, STATUS),
    help='Action for each port: ' + START +', ' + STOP + ', or ' + STATUS
)


# Read args from parser
args = parser.parse_args()
ports = map(str, args.p)
host = args.d
action = args.a


# Return the PIDs of all processes using this port.  
def pidsForPort(port):
    cmd = ['ss', '-altp']
    proc = subprocess.run(cmd, capture_output='true')
    lines = str(proc.stdout).split('\\n')
    portstr = '127.0.0.1:' + port
    pidstr = 'pid='
    pids = []
    for line in lines:
        if((portstr in line) and (pidstr in line)):
            toks = line.split(pidstr)
            pid = toks[1].split(',')[0]
            pids += [pid]
    return pids


# Return the PIDs of all ssh processes using this port on our host.  
def pidsForPortToHost(port):
    cmd = ['ps', '-C', 'ssh', 'n']
    proc = subprocess.run(cmd, capture_output='true')
    lines = str(proc.stdout).split('\\n')
    portstr = port + ':localhost:' + port
    pids = []
    for line in lines:
        if((portstr in line) and (host in line)):
            toks = line.split()
            pid = toks[0]
            pids += [pid]
    return pids


# Check the status of a port.
def status(port):
    print('Checking status of port ' + port + '...')
    pids = pidsForPort(port)

    # If there are no PIDs associated with this port, it is not in use
    if(len(pids) == 0):
        print('  Port ' + port + ' is not in use')
    else:
        print('  Port ' + port + ' is busy')


# Attempt to forward the port.   
def start(port):
    print('Forwarding port ' + port + ' to ' + host + '...')

    # If no PIDs exist for this port, it's available.  
    if(len(pidsForPort(port)) == 0):

        # Try to forward the port to the destination machine
        cmd = [
            'ssh',
            '-o ConnectTimeout=7',
            '-NfL',
            port+':localhost:'+port,
            host,
        ]
        completedProcess = subprocess.run(cmd)

        # There should now be a PID for our fowarding
        if(len(pidsForPortToHost(port)) > 0):
            print('  Port ' + port + ' has been forwarded to ' + host)
        else:
            print('  Could not forward port ' + port + ' to ' + host)

    # Otherwise, the port is already in use:
    else:
        print('  port ' + port + ' was busy')


# Attempt to stop forwarding the port, only killing our own processes
def stop(port):
    print('Unforwarding port ' + port + ' from ' + host + '...')
    pids = pidsForPortToHost(port)
    
    # Kill any PIDs for this port
    if(len(pids) > 0):
        for pid in pids:
            cmd = ['kill', str(pid)]
            completedProcess = subprocess.run(cmd)

        # There should now be no pids for this port
        if(len(pidsForPort(port)) == 0):
            print('  Unforwarded port ' + port + ' from ' + host)
        else:
            print('  Could not unforward port ' + port + ' from ' + host)

    # If no PIDs were found, the port was not in use
    else:
        print('  Port ' + port + ' was not in use')
        

# Service all the ports
for port in ports:
    try:
        if(action == START):
            start(port)
        elif(action == STOP):
            stop(port)
        else:
            status(port)
    except:
        print(  'An exception was thrown during this operation')




.. _program_listing_file_src_cpp_model_pgm_ConstantNode.h:

Program Listing for File ConstantNode.h
=======================================

|exhale_lsh| :ref:`Return to documentation for file <file_src_cpp_model_pgm_ConstantNode.h>` (``src/cpp/model/pgm/ConstantNode.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #include "Node.h"
   
   #include "utils/Definitions.h"
   
   namespace tomcat {
       namespace model {
   
           class ConstantNode : public Node {
             public:
               //------------------------------------------------------------------
               // Constructors & Destructor
               //------------------------------------------------------------------
   
               ConstantNode(double value, std::string label = "unlabeled");
   
               ConstantNode(const Eigen::VectorXd& values,
                            std::string label = "unlabeled");
   
               ConstantNode(const Eigen::VectorXd&& values,
                            std::string label = "unlabeled");
   
               ~ConstantNode();
   
               //------------------------------------------------------------------
               // Copy & Move constructors/assignments
               //------------------------------------------------------------------
               ConstantNode(const ConstantNode& node);
   
               ConstantNode& operator=(const ConstantNode& node);
   
               ConstantNode(ConstantNode&&) = default;
   
               ConstantNode& operator=(ConstantNode&&) = default;
   
               //------------------------------------------------------------------
               // Member functions
               //------------------------------------------------------------------
               std::unique_ptr<Node> clone() const override;
   
               std::string get_description() const override;
   
               std::string get_timed_name() const override;
   
               //std::string get_timed_name(int time_step) const override;
   
             private:
               //------------------------------------------------------------------
               // Member functions
               //------------------------------------------------------------------
   
               void create_default_metadata(std::string& label, int sample_size);
   
           };
   
       } // namespace model
   } // namespace tomcat

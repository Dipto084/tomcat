
.. _program_listing_file_src_cpp_pro_gen_AABB.h:

Program Listing for File AABB.h
===============================

|exhale_lsh| :ref:`Return to documentation for file <file_src_cpp_pro_gen_AABB.h>` (``src/cpp/pro_gen/AABB.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   
   #pragma once
   
   #include "Block.h"
   #include "Door.h"
   #include "Entity.h"
   #include "Object.h"
   #include <random>
   #include <vector>
   
   class AABB {
   
     protected:
       std::string id;
       std::string material;
       std::string type;
       Pos topLeft;
       Pos bottomRight;
       bool isHollow;
       bool hasRoof;
       std::vector<Block*> blockList;
       std::vector<Entity*> entityList;
       std::vector<Object*> objectList;
   
     public:
       std::string getID();
   
       std::string getMaterial();
   
       std::string getType();
   
       Pos getTopLeft();
   
       Pos getBottomRight();
   
       std::vector<Block*>& getBlockList();
   
       std::vector<Entity*>& getEntityList();
   
       std::vector<Object*>& getObjectList();
   
       int getMidpointX();
   
       int getMidpointY();
   
       int getMidpointZ();
   
       int getSizeX();
   
       int getSizeY();
   
       int getSizeZ();
   
       Pos virtual getRandomPos(std::mt19937_64& gen,
                                int offsetPosX = 0,
                                int offsetNegX = 0,
                                int offsetPosY = 0,
                                int offsetNegY = 0,
                                int offsetPosZ = 0,
                                int offsetNegZ = 0);
   
       std::vector<Pos> virtual getEdgeMidpointAtBase();
   
       void setTopLeft(Pos& topLeft);
   
       void setBottomRight(Pos& bottomRight);
   
       void setMaterial(std::string material);
   
       void addBlock(Block& block);
   
       void addEntity(Entity& entity);
   
       void addObject(Object& object);
   
       bool virtual isOverlapping(AABB& other);
   
       void virtual generateBox(std::string material,
                                int offsetPosX = 0,
                                int offsetNegX = 0,
                                int offsetPosY = 0,
                                int offsetNegY = 0,
                                int offsetPosZ = 0,
                                int offsetNegZ = 0);
   
       void virtual addRandomBlocks(int n,
                                    std::string material,
                                    std::mt19937_64& gen,
                                    int offsetPosX = 0,
                                    int offsetNegX = 0,
                                    int offsetPosY = 0,
                                    int offsetNegY = 0,
                                    int offsetPosZ = 0,
                                    int offsetNegZ = 0);
   
       void virtual generateAllDoorsInAABB();
   
       void virtual toSemanticMapJSON(nlohmann::json& json_base);
   
       void virtual toLowLevelMapJSON(nlohmann::json& json_base);
   
       AABB(std::string id,
            std::string type,
            std::string material,
            Pos& topLeft,
            Pos& bottomRight,
            bool isHollow = true,
            bool hasRoof = false);
   
       virtual ~AABB();
   };

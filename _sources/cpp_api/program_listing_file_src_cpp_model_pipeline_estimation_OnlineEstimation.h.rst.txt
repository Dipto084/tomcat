
.. _program_listing_file_src_cpp_model_pipeline_estimation_OnlineEstimation.h:

Program Listing for File OnlineEstimation.h
===========================================

|exhale_lsh| :ref:`Return to documentation for file <file_src_cpp_model_pipeline_estimation_OnlineEstimation.h>` (``src/cpp/model/pipeline/estimation/OnlineEstimation.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #pragma once
   
   #include <memory>
   #include <thread>
   
   #include <nlohmann/json.hpp>
   
   #include "EstimationProcess.h"
   
   #include "converter/MessageConverter.h"
   #include "utils/Definitions.h"
   #include "utils/Mosquitto.h"
   #include "utils/SynchronizedQueue.h"
   
   namespace tomcat {
       namespace model {
   
           class OnlineEstimation : public EstimationProcess, public Mosquitto {
             public:
               //------------------------------------------------------------------
               // Structs
               //------------------------------------------------------------------
   
               struct MessageBrokerConfiguration {
                   std::string address;
                   int port;
   
                   // If defined, the estimation thread will terminate after the
                   // number of seconds here defined without receiving any message.
                   int timeout = 9999;
   
                   // Topics to subscribe to
                   std::string state_topic = "observations/state";
                   std::string chat_topic = "observations/chat";
                   std::string events_topic = "observations/events/#";
                   std::string self_report_topic = "observations/self_reports";
                   std::string trial_topic = "trial";
   
                   // Topics to publish to
                   std::string estimates_topic = "tomcat/estimates";
                   std::string log_topic = "tomcat/log";
               };
   
               //------------------------------------------------------------------
               // Constructors & Destructor
               //------------------------------------------------------------------
   
               OnlineEstimation(
                   MessageBrokerConfiguration config,
                   std::shared_ptr<MessageConverter> message_converter);
   
               ~OnlineEstimation();
   
               //------------------------------------------------------------------
               // Copy & Move constructors/assignments
               //------------------------------------------------------------------
               OnlineEstimation(const OnlineEstimation& estimation);
   
               OnlineEstimation& operator=(const OnlineEstimation& estimation);
   
               // The synchronized queue used in this class has no move
               // constructor, so let's not allow this class to be moved as well..
               OnlineEstimation(OnlineEstimation&&) = delete;
   
               OnlineEstimation& operator=(OnlineEstimation&&) = delete;
   
               //------------------------------------------------------------------
               // Member functions
               //------------------------------------------------------------------
               void estimate(const EvidenceSet& test_data) override;
   
             protected:
               void prepare() override;
   
               void on_error(const std::string& error_message) override;
   
               void on_message(const std::string& topic,
                               const std::string& message) override;
   
               void on_time_out() override;
   
               void get_info(nlohmann::json& json) const override;
   
             private:
               //------------------------------------------------------------------
               // Member functions
               //------------------------------------------------------------------
   
               void copy_estimation(const OnlineEstimation& estimation);
   
               void run_estimation_thread();
   
               EvidenceSet get_next_data_from_pending_messages();
   
               void publish_last_estimates();
   
               //------------------------------------------------------------------
               // Data members
               //------------------------------------------------------------------
               MessageBrokerConfiguration config;
   
               std::shared_ptr<MessageConverter> message_converter;
   
               // Number of time steps the estimation already processed.
               int time_step;
   
               // Messages received from the message bus and stored to be processed
               // by the estimation threads.
               SynchronizedQueue<nlohmann::json> messages_to_process;
           };
   
       } // namespace model
   } // namespace tomcat

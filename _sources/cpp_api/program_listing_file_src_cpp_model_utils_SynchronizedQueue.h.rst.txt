
.. _program_listing_file_src_cpp_model_utils_SynchronizedQueue.h:

Program Listing for File SynchronizedQueue.h
============================================

|exhale_lsh| :ref:`Return to documentation for file <file_src_cpp_model_utils_SynchronizedQueue.h>` (``src/cpp/model/utils/SynchronizedQueue.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #pragma once
   
   #include <mutex>
   #include <queue>
   
   #include "utils/Definitions.h"
   
   namespace tomcat {
       namespace model {
   
           template <typename T> class SynchronizedQueue {
             public:
               SynchronizedQueue() {}
   
               ~SynchronizedQueue() {}
   
               //------------------------------------------------------------------
               // Copy & Move constructors/assignments
               //------------------------------------------------------------------
               SynchronizedQueue(const SynchronizedQueue&) = delete;
   
               SynchronizedQueue& operator=(const SynchronizedQueue&) = delete;
   
               SynchronizedQueue(SynchronizedQueue&&) = delete;
   
               SynchronizedQueue& operator=(SynchronizedQueue&&) = delete;
   
               //------------------------------------------------------------------
               // Member functions
               //------------------------------------------------------------------
               void push(const T& data) {
                   std::scoped_lock lock(this->mutex);
                   this->queue.push(data);
               }
   
               bool empty() const {
                   std::scoped_lock lock(this->mutex);
                   return this->queue.empty();
               }
   
               T& front() {
                   std::scoped_lock lock(this->mutex);
                   return this->queue.front();
               }
   
               T const& front() const {
                   std::scoped_lock lock(this->mutex);
                   return this->queue.front();
               }
   
               void pop() {
                   std::scoped_lock lock(this->mutex);
                   this->queue.pop();
               }
   
             private:
               //------------------------------------------------------------------
               // Data members
               //------------------------------------------------------------------
               std::queue<T> queue;
               mutable std::mutex mutex;
           };
   
       } // namespace model
   } // namespace tomcat

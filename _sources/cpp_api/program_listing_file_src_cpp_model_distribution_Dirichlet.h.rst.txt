
.. _program_listing_file_src_cpp_model_distribution_Dirichlet.h:

Program Listing for File Dirichlet.h
====================================

|exhale_lsh| :ref:`Return to documentation for file <file_src_cpp_model_distribution_Dirichlet.h>` (``src/cpp/model/distribution/Dirichlet.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #pragma once
   
   #include "../utils/Definitions.h"
   #include "Continuous.h"
   
   namespace tomcat {
       namespace model {
   
           class Dirichlet : public Continuous {
   
             public:
               //------------------------------------------------------------------
               // Constructors & Destructor
               //------------------------------------------------------------------
   
               Dirichlet(std::vector<std::shared_ptr<Node>>& alpha);
   
               Dirichlet(std::vector<std::shared_ptr<Node>>&& alpha);
   
               Dirichlet(const Eigen::VectorXd& alpha);
   
               ~Dirichlet();
   
               //------------------------------------------------------------------
               // Copy & Move constructors/assignments
               //------------------------------------------------------------------
               Dirichlet(const Dirichlet& dirichlet);
   
               Dirichlet& operator=(const Dirichlet& dirichlet);
   
               Dirichlet(Dirichlet&&) = default;
   
               Dirichlet& operator=(Dirichlet&&) = default;
   
               //------------------------------------------------------------------
               // Member functions
               //------------------------------------------------------------------
               Eigen::VectorXd sample(std::shared_ptr<gsl_rng> random_generator,
                                      int parameter_idx) const override;
   
               Eigen::VectorXd sample(std::shared_ptr<gsl_rng> random_generator,
                                      int parameter_idx,
                                      const Eigen::VectorXd& weights) const override;
   
               Eigen::VectorXd sample_from_conjugacy(
                   std::shared_ptr<gsl_rng> random_generator,
                   int parameter_idx,
                   const Eigen::VectorXd& sufficient_statistics) const override;
   
               double get_pdf(const Eigen::VectorXd& value,
                              int parameter_idx) const override;
   
               std::unique_ptr<Distribution> clone() const override;
   
               std::string get_description() const override;
   
               int get_sample_size() const override;
   
             private:
               //------------------------------------------------------------------
               // Member functions
               //------------------------------------------------------------------
   
               Eigen::VectorXd get_alpha(int parameter_idx) const;
   
               Eigen::VectorXd
               sample_from_gsl(std::shared_ptr<gsl_rng> random_generator,
                               const Eigen::VectorXd& parameters) const;
           };
   
       } // namespace model
   } // namespace tomcat


.. _program_listing_file_src_cpp_model_pgm_cpd_CPD.h:

Program Listing for File CPD.h
==============================

|exhale_lsh| :ref:`Return to documentation for file <file_src_cpp_model_pgm_cpd_CPD.h>` (``src/cpp/model/pgm/cpd/CPD.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #pragma once
   
   #include <iterator>
   #include <memory>
   #include <vector>
   
   #include <eigen3/Eigen/Dense>
   #include <gsl/gsl_randist.h>
   #include <gsl/gsl_rng.h>
   
   #include "model/distribution/Distribution.h"
   #include "model/utils/Definitions.h"
   #include "model/pgm/Node.h"
   
   namespace tomcat {
       namespace model {
   
           //------------------------------------------------------------------
           // Structs
           //------------------------------------------------------------------
   
           struct ParentIndexing {
               // Order of the parent node's label for table indexing
               int order;
               int cardinality;
               // Cumulative cardinality of the nodes to the right of the parent
               // node's label order.
               int right_cumulative_cardinality;
   
               ParentIndexing() {}
               ParentIndexing(int order,
                              int cardinality,
                              int right_cumulative_cardinality)
                   : order(order), cardinality(cardinality),
                     right_cumulative_cardinality(right_cumulative_cardinality) {}
           };
   
           class CPD {
             public:
               typedef std::unordered_map<std::string, ParentIndexing>
                   TableOrderingMap;
   
               //------------------------------------------------------------------
               // Constructors & Destructor
               //------------------------------------------------------------------
   
               CPD();
   
               CPD(std::vector<std::shared_ptr<NodeMetadata>>& parent_node_order);
   
               CPD(std::vector<std::shared_ptr<NodeMetadata>>&& parent_node_order);
   
               CPD(std::vector<std::shared_ptr<NodeMetadata>>& parent_node_order,
                   std::vector<std::shared_ptr<Distribution>>& distributions);
   
               CPD(std::vector<std::shared_ptr<NodeMetadata>>&& parent_node_order,
                   std::vector<std::shared_ptr<Distribution>>&& distributions);
   
               virtual ~CPD();
   
               //------------------------------------------------------------------
               // Copy & Move constructors/assignments
               //------------------------------------------------------------------
   
               // Copy constructor and assignment should be deleted to avoid
               // implicit slicing and loss of polymorphic behaviour in the
               // subclasses. To deep copy, the clone method must be used.
               CPD(const CPD&) = delete;
   
               CPD& operator=(const CPD&) = delete;
   
               CPD(CPD&& cpd) = default;
   
               CPD& operator=(CPD&& cpd) = default;
   
               //------------------------------------------------------------------
               // Operator overload
               //------------------------------------------------------------------
               friend std::ostream& operator<<(std::ostream& os, const CPD& cpd);
   
               //------------------------------------------------------------------
               // Member functions
               //------------------------------------------------------------------
   
               void update_dependencies(Node::NodeMap& parameter_nodes_map,
                                        int time_step);
   
               Eigen::MatrixXd
               sample(std::shared_ptr<gsl_rng> random_generator,
                      const std::vector<std::shared_ptr<Node>>& parent_nodes,
                      int num_samples,
                      bool equal_samples = false) const;
   
               Eigen::MatrixXd
               sample(std::shared_ptr<gsl_rng> random_generator,
                      const std::vector<std::shared_ptr<Node>>& parent_nodes,
                      int num_samples,
                      Eigen::MatrixXd weights,
                      bool equal_samples = false) const;
   
               Eigen::VectorXd
               get_pdfs(const std::vector<std::shared_ptr<Node>>& parent_nodes,
                        const Node& node) const;
   
               void update_sufficient_statistics(
                   const std::vector<std::shared_ptr<Node>>& parent_nodes,
                   const Eigen::MatrixXd& cpd_owner_assignments);
   
               void reset_updated_status();
   
               void print(std::ostream& os) const;
   
               Eigen::MatrixXd get_table() const;
   
               //------------------------------------------------------------------
               // Pure virtual functions
               //------------------------------------------------------------------
   
               virtual std::unique_ptr<CPD> clone() const = 0;
   
               virtual void
               add_to_sufficient_statistics(const Eigen::VectorXd& sample) = 0;
   
               virtual Eigen::MatrixXd sample_from_conjugacy(
                   std::shared_ptr<gsl_rng> random_generator,
                   const std::vector<std::shared_ptr<Node>>& parent_nodes,
                   int num_samples) const = 0;
   
               virtual void reset_sufficient_statistics() = 0;
   
               //------------------------------------------------------------------
               // Getters & Setters
               //------------------------------------------------------------------
               const std::string& get_id() const;
   
               bool is_updated() const;
   
               const TableOrderingMap& get_parent_label_to_indexing() const;
   
             protected:
               //------------------------------------------------------------------
               // Member functions
               //------------------------------------------------------------------
   
               void copy_cpd(const CPD& cpd);
   
               std::vector<int> get_distribution_indices(
                   const std::vector<std::shared_ptr<Node>>& parent_nodes,
                   int num_samples) const;
   
               //------------------------------------------------------------------
               // Pure virtual functions
               //------------------------------------------------------------------
   
               virtual std::string get_description() const = 0;
   
               virtual void clone_distributions() = 0;
   
               //------------------------------------------------------------------
               // Data members
               //------------------------------------------------------------------
   
               // Unique identifier formed by the concatenation of the parent
               // labels in alphabetical order delimited by comma.
               std::string id;
   
               // It defines the order of the parent nodes in the cartesian
               // product of their possible assignments. It's necessary to know
               // this order for correctly index a distribution given parent's
               // assignments.
               std::vector<std::shared_ptr<NodeMetadata>> parent_node_order;
   
               // List of distributions per parents' assignments
               std::vector<std::shared_ptr<Distribution>> distributions;
   
               // It indicates whether the CPD was updated with concrete instances
               // of the nodes it depends on
               bool updated = false;
   
             private:
               //------------------------------------------------------------------
               // Member functions
               //------------------------------------------------------------------
   
               void init_id();
   
               void fill_indexing_mapping();
   
               Node::NodeMap map_labels_to_nodes(
                   const std::vector<std::shared_ptr<Node>>& nodes) const;
   
               //------------------------------------------------------------------
               // Data members
               //------------------------------------------------------------------
               TableOrderingMap parent_label_to_indexing;
           };
   
       } // namespace model
   } // namespace tomcat

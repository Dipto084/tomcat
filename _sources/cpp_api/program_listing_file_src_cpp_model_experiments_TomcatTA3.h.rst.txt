
.. _program_listing_file_src_cpp_model_experiments_TomcatTA3.h:

Program Listing for File TomcatTA3.h
====================================

|exhale_lsh| :ref:`Return to documentation for file <file_src_cpp_model_experiments_TomcatTA3.h>` (``src/cpp/model/experiments/TomcatTA3.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #pragma once
   
   #include <memory>
   #include <string>
   #include <unordered_map>
   #include <vector>
   
   #include "Tomcat.h"
   
   #include "pgm/DynamicBayesNet.h"
   #include "pgm/NodeMetadata.h"
   #include "utils/Definitions.h"
   #include "converter/TA3MessageConverter.h"
   
   namespace tomcat {
       namespace model {
   
           class TomcatTA3 : public Tomcat {
             public:
               //------------------------------------------------------------------
               // Types, Enums & Constants
               //------------------------------------------------------------------
               inline static const int NUM_STATES = 4;
               inline static const int NUM_SECONDS = 600;
   
               // Hidden variable labels
               inline static const std::string THETA_S = "Theta_S";
               inline static const std::string PI_RM = "Pi_RM";
               inline static const std::string PI_SG = "Pi_SG";
               inline static const std::string PI_SY = "Pi_SY";
               inline static const std::string STATE = "State";
               inline static const std::string ROOM = TA3MessageConverter::ROOM;
               inline static const std::string SG = TA3MessageConverter::SG;
               inline static const std::string SY = TA3MessageConverter::SY;
   
               //------------------------------------------------------------------
               // Constructors & Destructor
               //------------------------------------------------------------------
   
               TomcatTA3();
   
               ~TomcatTA3();
   
               //------------------------------------------------------------------
               // Copy & Move constructors/assignments
               //------------------------------------------------------------------
               TomcatTA3(const TomcatTA3& tomcat);
   
               TomcatTA3& operator=(const TomcatTA3& tomcat);
   
               TomcatTA3(TomcatTA3&&) = default;
   
               TomcatTA3& operator=(TomcatTA3&&) = default;
   
               //------------------------------------------------------------------
               // Member functions
               //------------------------------------------------------------------
   
               void init() override;
   
             protected:
               //------------------------------------------------------------------
               // Virtual functions
               //------------------------------------------------------------------
   
               virtual std::unordered_map<std::string,
                                          std::shared_ptr<RandomVariableNode>>
               get_nodes() const;
   
               virtual std::vector<std::shared_ptr<NodeMetadata>>
               create_theta_s_metadatas() const;
   
               virtual std::shared_ptr<NodeMetadata> create_state_metadata() const;
   
               virtual std::shared_ptr<NodeMetadata> create_room_metadata() const;
   
               virtual std::shared_ptr<NodeMetadata> create_sg_metadata() const;
   
               virtual std::shared_ptr<NodeMetadata> create_sy_metadata() const;
   
               virtual std::vector<std::shared_ptr<CPD>>
               create_theta_s_prior_cpds() const;
   
               virtual std::shared_ptr<CPD> create_state_prior_cpd() const;
   
               virtual std::shared_ptr<CPD> create_state_transition_cpd(
                   std::vector<std::shared_ptr<NodeMetadata>>
                       parent_nodes_metadata,
                   std::vector<std::shared_ptr<RandomVariableNode>> theta_s_nodes)
                   const;
   
               virtual std::shared_ptr<CPD>
               create_room_cpd(std::shared_ptr<NodeMetadata> state_metadata) const;
   
               virtual std::shared_ptr<CPD>
               create_sg_cpd(std::shared_ptr<NodeMetadata> state_metadata) const;
   
               virtual std::shared_ptr<CPD>
               create_sy_cpd(std::shared_ptr<NodeMetadata> state_metadata) const;
           };
   
       } // namespace model
   } // namespace tomcat

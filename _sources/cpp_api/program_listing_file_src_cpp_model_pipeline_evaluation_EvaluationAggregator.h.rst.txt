
.. _program_listing_file_src_cpp_model_pipeline_evaluation_EvaluationAggregator.h:

Program Listing for File EvaluationAggregator.h
===============================================

|exhale_lsh| :ref:`Return to documentation for file <file_src_cpp_model_pipeline_evaluation_EvaluationAggregator.h>` (``src/cpp/model/pipeline/evaluation/EvaluationAggregator.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #pragma once
   
   #include <iostream>
   #include <memory>
   #include <unordered_map>
   #include <vector>
   
   #include "../../pgm/EvidenceSet.h"
   #include "../../utils/Definitions.h"
   #include "Measure.h"
   
   namespace tomcat {
       namespace model {
   
           //------------------------------------------------------------------
           // Structs
           //------------------------------------------------------------------
   
           struct Aggregation {
   
               // This is defined as a vector because according to the aggregation
               // method chosen, no aggregation might be performed at all.
               std::vector<Eigen::MatrixXd> aggregated_values;
   
               // The error is a single matrix because, depending on the measure
               // chosen to evaluate nodes, the results can be matrices instead of a
               // single number. In that case, if the method chosen for aggregating
               // such evaluations is indeed a summarizer (it can just preserve
               // the evaluations with no aggregation at all), the resultant error
               // will be over a list of matrices, which will result in a single
               // matrix.
               Eigen::MatrixXd errors;
           };
   
           struct NodeEvaluationAggregation {
   
               std::string label;
   
               Eigen::VectorXd assignment;
   
               Aggregation aggregated_evaluation;
           };
   
           class EvaluationAggregator {
             public:
               //------------------------------------------------------------------
               // Types, Enums & Constants
               //------------------------------------------------------------------
               enum METHOD { no_aggregation, average };
   
               //------------------------------------------------------------------
               // Constructors & Destructor
               //------------------------------------------------------------------
   
               EvaluationAggregator(METHOD method);
   
               ~EvaluationAggregator();
   
               //------------------------------------------------------------------
               // Copy & Move constructors/assignments
               //------------------------------------------------------------------
               EvaluationAggregator(const EvaluationAggregator&) = default;
   
               EvaluationAggregator&
               operator=(const EvaluationAggregator&) = default;
   
               EvaluationAggregator(EvaluationAggregator&&) = default;
   
               EvaluationAggregator& operator=(EvaluationAggregator&&) = default;
   
               //------------------------------------------------------------------
               // Member functions
               //------------------------------------------------------------------
   
               void reset();
   
               void add_measure(std::shared_ptr<Measure> measure);
   
               void evaluate(const EvidenceSet& test_data);
   
               void aggregate();
   
               void get_info(nlohmann::json& json) const;
   
             private:
               //------------------------------------------------------------------
               // Member functions
               //------------------------------------------------------------------
   
               Aggregation
               compute_aggregation(const std::vector<Eigen::MatrixXd>& evaluations) const;
   
               std::string get_method_name() const;
   
               //------------------------------------------------------------------
               // Data members
               //------------------------------------------------------------------
               METHOD method = METHOD::no_aggregation;
   
               std::vector<std::shared_ptr<Measure>> measures;
   
               // This stores a list of evaluations per node for a certain measure.
               // A combination of measure and node can have multiple evaluations
               // because the pipeline may call the evaluate function multiple
               // times by using cross validation, for instance. The aggregator
               // will store all the evaluations in this data structure and it will
               // aggregate them only upon request.
               std::vector<std::vector<std::vector<NodeEvaluation>>>
                   evaluations_per_measure;
   
               // This stores the aggregated values for the evaluations previously
               // computed and kept.
               std::vector<std::vector<NodeEvaluationAggregation>>
                   aggregations_per_measure;
           };
   
       } // namespace model
   } // namespace tomcat

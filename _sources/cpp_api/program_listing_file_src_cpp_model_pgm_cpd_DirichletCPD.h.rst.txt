
.. _program_listing_file_src_cpp_model_pgm_cpd_DirichletCPD.h:

Program Listing for File DirichletCPD.h
=======================================

|exhale_lsh| :ref:`Return to documentation for file <file_src_cpp_model_pgm_cpd_DirichletCPD.h>` (``src/cpp/model/pgm/cpd/DirichletCPD.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #pragma once
   
   #include "model/utils/Definitions.h"
   #include "model/distribution/Dirichlet.h"
   #include "model/pgm/cpd/CPD.h"
   
   namespace tomcat {
       namespace model {
   
           class DirichletCPD : public CPD {
             public:
               //------------------------------------------------------------------
               // Constructors & Destructor
               //------------------------------------------------------------------
   
               DirichletCPD(
                   std::vector<std::shared_ptr<NodeMetadata>>& parent_node_order,
                   const std::vector<std::shared_ptr<Dirichlet>>& distributions);
   
               DirichletCPD(
                   std::vector<std::shared_ptr<NodeMetadata>>&& parent_node_order,
                   const std::vector<std::shared_ptr<Dirichlet>>& distributions);
   
               DirichletCPD(
                   std::vector<std::shared_ptr<NodeMetadata>>& parent_node_order,
                   const Eigen::MatrixXd& alphas);
   
               DirichletCPD(
                   std::vector<std::shared_ptr<NodeMetadata>>&& parent_node_order,
                   const Eigen::MatrixXd& alphas);
   
               ~DirichletCPD();
   
               //------------------------------------------------------------------
               // Copy & Move constructors/assignments
               //------------------------------------------------------------------
               DirichletCPD(const DirichletCPD& cpd);
   
               DirichletCPD& operator=(const DirichletCPD& cpd);
   
               DirichletCPD(DirichletCPD&& cpd) = default;
   
               DirichletCPD& operator=(DirichletCPD&& cpd) = default;
   
               //------------------------------------------------------------------
               // Member functions
               //------------------------------------------------------------------
               std::unique_ptr<CPD> clone() const override;
   
               std::string get_description() const override;
   
               void add_to_sufficient_statistics(
                   const Eigen::VectorXd& sample) override;
   
               Eigen::MatrixXd sample_from_conjugacy(
                   std::shared_ptr<gsl_rng> random_generator,
                   const std::vector<std::shared_ptr<Node>>& parent_nodes,
                   int num_samples) const override;
   
               void reset_sufficient_statistics() override;
   
             protected:
               //------------------------------------------------------------------
               // Member functions
               //------------------------------------------------------------------
               void clone_distributions() override;
   
             private:
               //------------------------------------------------------------------
               // Member functions
               //------------------------------------------------------------------
   
               void init_from_distributions(
                   const std::vector<std::shared_ptr<Dirichlet>>& distributions);
   
               void init_from_matrix(const Eigen::MatrixXd& matrix);
   
               //------------------------------------------------------------------
               // Data members
               //------------------------------------------------------------------
   
               Eigen::VectorXd sufficient_statistics;
           };
   
       } // namespace model
   } // namespace tomcat

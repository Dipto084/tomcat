
.. _program_listing_file_src_cpp_model_distribution_Categorical.h:

Program Listing for File Categorical.h
======================================

|exhale_lsh| :ref:`Return to documentation for file <file_src_cpp_model_distribution_Categorical.h>` (``src/cpp/model/distribution/Categorical.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #pragma once
   
   #include "model/utils/Definitions.h"
   #include "model/pgm/Node.h"
   #include "model/distribution/Distribution.h"
   
   namespace tomcat {
       namespace model {
   
           class Categorical : public Distribution {
             public:
               //------------------------------------------------------------------
               // Constructors & Destructor
               //------------------------------------------------------------------
   
               Categorical(std::shared_ptr<Node>& probabilities);
   
               Categorical(std::shared_ptr<Node>&& probabilities);
   
               Categorical(const Eigen::VectorXd& probabilities);
   
               Categorical(const Eigen::VectorXd&& probabilities);
   
               ~Categorical();
   
               //------------------------------------------------------------------
               // Copy & Move constructors/assignments
               //------------------------------------------------------------------
               Categorical(const Categorical& categorical);
   
               Categorical& operator=(const Categorical& categorical);
   
               Categorical(Categorical&&) = default;
   
               Categorical& operator=(Categorical&&) = default;
   
               //------------------------------------------------------------------
               // Member functions
               //------------------------------------------------------------------
               void update_dependencies(Node::NodeMap& parameter_nodes_map,
                                        int time_step) override;
   
               Eigen::VectorXd sample(std::shared_ptr<gsl_rng> random_generator,
                                      int parameter_idx) const override;
   
               Eigen::VectorXd
               sample(std::shared_ptr<gsl_rng> random_generator,
                      int parameter_idx,
                      const Eigen::VectorXd& weights) const override;
   
               Eigen::VectorXd sample_from_conjugacy(
                   std::shared_ptr<gsl_rng> random_generator,
                   int parameter_idx,
                   const Eigen::VectorXd& sufficient_statistics) const override;
   
               double get_pdf(const Eigen::VectorXd& value,
                              int parameter_idx) const override;
   
               std::unique_ptr<Distribution> clone() const override;
   
               std::string get_description() const override;
   
               int get_sample_size() const override;
   
               void update_sufficient_statistics(
                   const Eigen::VectorXd& sample) override;
   
               Eigen::VectorXd get_values() const override;
   
             private:
               //------------------------------------------------------------------
               // Member functions
               //------------------------------------------------------------------
   
               Eigen::VectorXd
               sample_from_gsl(std::shared_ptr<gsl_rng> random_generator,
                               const Eigen::VectorXd& parameters) const;
   
               unsigned int get_sample_index(const unsigned int* sample_array,
                                             size_t array_size) const;
   
               //------------------------------------------------------------------
               // Data members
               //------------------------------------------------------------------
   
               // The assignment of a node defines the probabilities
               std::shared_ptr<Node> probabilities;
           };
   
       } // namespace model
   } // namespace tomcat

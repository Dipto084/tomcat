
.. _program_listing_file_src_cpp_model_pgm_inference_MessageNode.h:

Program Listing for File MessageNode.h
======================================

|exhale_lsh| :ref:`Return to documentation for file <file_src_cpp_model_pgm_inference_MessageNode.h>` (``src/cpp/model/pgm/inference/MessageNode.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #pragma once
   
   #include <memory>
   #include <string>
   #include <unordered_map>
   #include <utility>
   #include <vector>
   
   #include <eigen3/Eigen/Dense>
   
   #include "model/utils/Definitions.h"
   
   namespace tomcat {
       namespace model {
   
           class MessageNode {
             public:
               //------------------------------------------------------------------
               // Structs
               //------------------------------------------------------------------
   
               struct MessageContainer {
                   std::unordered_map<std::string, Eigen::MatrixXd>
                       node_name_to_messages;
   
                   const Eigen::MatrixXd
                   get_message_for(const std::string node_label,
                                   int time_step) const {
   
                       std::string node_name =
                           MessageNode::get_name(node_label, time_step);
                       return this->node_name_to_messages.at(node_name);
                   }
   
                   void set_message_for(const std::string node_label,
                                        int time_step,
                                        const Eigen::MatrixXd& message) {
   
                       std::string node_name =
                           MessageNode::get_name(node_label, time_step);
                       this->node_name_to_messages[node_name] = message;
                   }
   
                   int size() const { return this->node_name_to_messages.size(); }
               };
   
               //------------------------------------------------------------------
               // Types, Enums & Constants
               //------------------------------------------------------------------
               inline static const std::string PRIOR_NODE_LABEL = "";
               inline static const std::string END_NODE_LABEL = "end_factor";
   
               // Direction of the message being passed in the factor graph
               enum Direction { backwards, forward };
   
               //------------------------------------------------------------------
               // Constructors & Destructor
               //------------------------------------------------------------------
   
               MessageNode();
   
               MessageNode(const std::string& label, int time_step);
   
               virtual ~MessageNode();
   
               //------------------------------------------------------------------
               // Copy & Move constructors/assignments
               //------------------------------------------------------------------
   
               // Copy constructor and assignment should be deleted to avoid
               // implicit slicing and loss of polymorphic behaviour in the
               // subclasses. To deep copy, the clone method must be used.
               MessageNode(const MessageNode&) = delete;
   
               MessageNode& operator=(const MessageNode&) = delete;
   
               MessageNode(MessageNode&&) = default;
   
               MessageNode& operator=(MessageNode&&) = default;
   
               //------------------------------------------------------------------
               // Static functions
               //------------------------------------------------------------------
   
               static std::string get_name(const std::string& label,
                                           int time_step);
   
               static bool is_prior(const std::string& node_name);
   
               static bool is_end_node(const std::string& node_name);
   
               static std::pair<std::string, int>
               strip(const std::string& node_name);
   
               //------------------------------------------------------------------
               // Member functions
               //------------------------------------------------------------------
   
               Eigen::MatrixXd
               get_incoming_message_from(const std::string& source_label,
                                         int source_time_step,
                                         int target_time_step) const;
   
               void set_incoming_message_from(const std::string& source_label,
                                              int source_time_step,
                                              int target_time_step,
                                              const Eigen::MatrixXd& message);
   
               std::string get_name() const;
   
               //------------------------------------------------------------------
               // Virtual functions
               //------------------------------------------------------------------
   
               virtual void erase_incoming_messages_beyond(int time_step);
   
               //------------------------------------------------------------------
               // Pure virtual functions
               //------------------------------------------------------------------
   
               virtual Eigen::MatrixXd get_outward_message_to(
                   const std::shared_ptr<MessageNode>& template_target_node,
                   int template_time_step,
                   int target_time_step,
                   Direction direction) const = 0;
   
               virtual bool is_factor() const = 0;
   
               //------------------------------------------------------------------
               // Getters & Setters
               //------------------------------------------------------------------
               const std::string& get_label() const;
   
               int get_time_step() const;
   
             protected:
               //------------------------------------------------------------------
               // Member functions
               //------------------------------------------------------------------
   
               void copy_node(const MessageNode& node);
   
               //------------------------------------------------------------------
               // Data members
               //------------------------------------------------------------------
               std::string label;
   
               int time_step;
   
               // Max time step with stored messages
               int max_time_step_stored = 0;
   
               // This map stores messages tha arrive in this node. The key to the
               // map is the time step of the messages. This is needed because a
               // node template in the repeatable time step of the factor graph
               // stores incoming messages for all of its time-sliced "copies" in
               // the future.
               std::unordered_map<int, MessageContainer>
                   incoming_messages_per_time_slice;
           };
   
       } // namespace model
   } // namespace tomcat

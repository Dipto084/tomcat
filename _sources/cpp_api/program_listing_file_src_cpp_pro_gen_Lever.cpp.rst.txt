
.. _program_listing_file_src_cpp_pro_gen_Lever.cpp:

Program Listing for File Lever.cpp
==================================

|exhale_lsh| :ref:`Return to documentation for file <file_src_cpp_pro_gen_Lever.cpp>` (``src/cpp/pro_gen/Lever.cpp``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #include "Lever.h"
   using namespace std;
   using json = nlohmann::json;
   
   Lever::Lever(Pos& pos, bool powered, string facing) : Block("lever", pos) {
       this->powered = powered;
       this->facing = facing;
   }
   
   void Lever::toSemanticMapJSON(json& json_base) {
       json block_json;
   
       string isPowered = "";
       if (this->powered) {
           isPowered = "true";
       }
       else {
           isPowered = "false";
       }
   
       vector<json> coordinate_list;
       coordinate_list.push_back(this->pos.toSemanticMapJSON());
   
       block_json["bounds"] = {{"type", "block"},
                               {"coordinates", coordinate_list}};
       block_json["material"] = this->getMaterial();
       block_json["powered"] = isPowered;
       block_json["facing"] = this->facing;
   
       json_base["locations"].push_back(block_json);
   }
   
   void Lever::toLowLevelMapJSON(json& json_base) {
       json block_json;
   
       string isPowered = "";
       if (this->powered) {
           isPowered = "true";
       }
       else {
           isPowered = "false";
       }
   
       block_json["material"] = this->getMaterial();
       block_json["x"] = to_string(this->getX());
       block_json["y"] = to_string(this->getY());
       block_json["z"] = to_string(this->getZ());
       block_json["powered"] = isPowered;
       block_json["facing"] = this->facing;
   
       json_base["blocks"].push_back(block_json);
   }
   
   Lever::~Lever() {}

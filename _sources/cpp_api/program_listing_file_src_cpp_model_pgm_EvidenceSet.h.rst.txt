
.. _program_listing_file_src_cpp_model_pgm_EvidenceSet.h:

Program Listing for File EvidenceSet.h
======================================

|exhale_lsh| :ref:`Return to documentation for file <file_src_cpp_model_pgm_EvidenceSet.h>` (``src/cpp/model/pgm/EvidenceSet.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #pragma once
   
   #include <string>
   #include <unordered_map>
   
   #include <nlohmann/json.hpp>
   
   #include "model/utils/Definitions.h"
   #include "model/utils/FileHandler.h"
   
   namespace tomcat {
       namespace model {
   
           class EvidenceSet {
             public:
               //------------------------------------------------------------------
               // Constructors & Destructor
               //------------------------------------------------------------------
   
               EvidenceSet();
   
               EvidenceSet(const std::string& data_folder_path);
   
               ~EvidenceSet();
   
               //------------------------------------------------------------------
               // Copy & Move constructors/assignments
               //------------------------------------------------------------------
               EvidenceSet(const EvidenceSet&) = default;
   
               EvidenceSet& operator=(const EvidenceSet&) = default;
   
               EvidenceSet(EvidenceSet&&) = default;
   
               EvidenceSet& operator=(EvidenceSet&&) = default;
   
               //------------------------------------------------------------------
               // Operator overload
               //------------------------------------------------------------------
   
               const Tensor3& operator[](const std::string& node_label) const;
   
               const Tensor3& operator[](std::string&& node_label) const;
   
               //------------------------------------------------------------------
               // Static functions
               //------------------------------------------------------------------
   
               static Eigen::MatrixXd
               get_observations_in_window(const Tensor3& data,
                                          const Eigen::VectorXd& assignment,
                                          int window);
               static int get_first_time_with_observation(const Tensor3& data);
   
               //------------------------------------------------------------------
               // Member functions
               //------------------------------------------------------------------
   
               std::vector<std::string> get_node_labels() const;
   
               void add_data(const std::string& node_label, const Tensor3& data);
   
               bool has_data_for(const std::string& node_label) const;
   
               void set_data_for(const std::string& node_label,
                                 const Tensor3 data);
   
               Eigen::MatrixXd
               get_observations_in_window_for(const std::string& node_label,
                                              const Eigen::VectorXd& assignment,
                                              int window) const;
   
               void keep_first(int num_samples);
   
               void shrink_up_to(int time_step);
   
               //------------------------------------------------------------------
               // Getters & Setters
               //------------------------------------------------------------------
               int get_num_data_points() const;
   
               int get_time_steps() const;
   
             private:
               //------------------------------------------------------------------
               // Member functions
               //------------------------------------------------------------------
   
               void init_from_folder(const std::string& data_folder_path);
   
               //------------------------------------------------------------------
               // Data members
               //------------------------------------------------------------------
               int num_data_points = 0;
   
               int time_steps = 0;
   
               std::unordered_map<std::string, Tensor3> node_label_to_data;
           };
   
       } // namespace model
   } // namespace tomcat

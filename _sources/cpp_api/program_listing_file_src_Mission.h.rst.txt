
.. _program_listing_file_src_Mission.h:

Program Listing for File Mission.h
==================================

|exhale_lsh| :ref:`Return to documentation for file <file_src_Mission.h>` (``src/Mission.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #pragma once
   
   #include "MissionSpec.h"
   #include <AgentHost.h>
   #include <boost/filesystem.hpp>
   #include <string>
   #include <unordered_map>
   
   namespace tomcat {
   
       class LocalAgent; // Forward declaration to deal with circular dependency
   
       class TomcatMissionException : public std::exception {
         public:
           enum ErrorCode {
               CONNECTION_NOT_ESTABLISHED,
               TOMCAT_ENV_VAR_NOT_SET,
               ERROR_STARTING_MISSION,
               WORLD_DIR_NOT_FOUND
           };
   
           TomcatMissionException(const std::string& message, ErrorCode error_code)
               : message(message), error_code(error_code) {}
           ~TomcatMissionException() throw() {}
           ErrorCode get_error_code() const { return this->error_code; }
           std::string get_message() const { return this->message; }
           const char* what() const throw() { return this->message.c_str(); }
   
         private:
           std::string message;
           ErrorCode error_code;
       };
   
       class Mission {
         public:
           Mission(std::string mission_id_or_path,
                   unsigned int time_limit_in_seconds,
                   unsigned int self_report_prompt_time_in_seconds,
                   unsigned int level_of_difficulty,
                   int port_number,
                   bool record_observations,
                   bool record_commands,
                   bool record_rewards,
                   bool multiplayer,
                   std::string uuid);
   
           ~Mission(){};
   
           void add_listener(std::shared_ptr<LocalAgent> tomcat_agent);
   
           void start();
   
           void send_command(std::string command);
   
         private:
           enum MissionId { TUTORIAL = 0, ZOMBIE = 1, USAR_SINGLEPLAYER = 2 };
   
           malmo::MissionSpec mission_spec;
           std::string mission_id_or_path;
           unsigned int time_limit_in_seconds;
           unsigned int self_report_prompt_time_in_seconds;
           unsigned int level_of_difficulty;
           int port_number;
           bool record_observations;
           bool record_commands;
           bool record_rewards;
           bool multiplayer;
           std::shared_ptr<malmo::AgentHost> minecraft_server;
           std::vector<std::shared_ptr<malmo::AgentHost>> minecraft_clients;
           std::shared_ptr<malmo::ClientPool> client_pool;
           std::vector<std::shared_ptr<LocalAgent>> tomcat_agents;
           std::string uuid;
   
           void create_mission_spec();
   
           inline static std::unordered_map<int, std::string>
               id_to_world_folder_map = {
                   {TUTORIAL, "tutorial"},
                   {ZOMBIE, "zombie"},
                   {USAR_SINGLEPLAYER, "Singleplayer"},
           };
   
           void create_client_pool();
   
           std::string get_world_skeleton_from_xml();
   
           std::string create_agent_section_tags();
   
           void create_agent_hosts();
   
           std::shared_ptr<malmo::AgentHost> connect_to_minecraft(int role);
   
           malmo::MissionRecordSpec get_mission_record_spec();
   
           void safe_wait_to_start();
   
           void observe();
       };
   
   } // namespace tomcat

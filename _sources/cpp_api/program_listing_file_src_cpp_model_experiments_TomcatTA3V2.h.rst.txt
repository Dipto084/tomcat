
.. _program_listing_file_src_cpp_model_experiments_TomcatTA3V2.h:

Program Listing for File TomcatTA3V2.h
======================================

|exhale_lsh| :ref:`Return to documentation for file <file_src_cpp_model_experiments_TomcatTA3V2.h>` (``src/cpp/model/experiments/TomcatTA3V2.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #pragma once
   
   #include "TomcatTA3.h"
   
   #include "utils/Definitions.h"
   
   namespace tomcat {
       namespace model {
   
           class TomcatTA3V2 : public TomcatTA3 {
             public:
               inline static const int NUM_TRAINING_CONDITIONS = 3;
               inline static const int NUM_BEEP_STATES = 3;
   
               // Hidden variable labels
               inline static const std::string THETA_Q_PRIOR = "Theta_Q_Prior";
               inline static const std::string THETA_PBAE_PRIOR = "Theta_PBAE_Prior";
               inline static const std::string THETA_PBAE = "Theta_PBAE"; // Transition
               inline static const std::string PBAE = "PBAE";
               inline static const std::string Q = TA3MessageConverter::Q;
               inline static const std::string BEEP = TA3MessageConverter::BEEP;
   
               //------------------------------------------------------------------
               // Constructors & Destructor
               //------------------------------------------------------------------
   
               TomcatTA3V2();
   
               ~TomcatTA3V2();
   
               //------------------------------------------------------------------
               // Copy & Move constructors/assignments
               //------------------------------------------------------------------
               TomcatTA3V2(const TomcatTA3V2& tomcat);
   
               TomcatTA3V2& operator=(const TomcatTA3V2& tomcat);
   
               TomcatTA3V2(TomcatTA3V2&&) = default;
   
               TomcatTA3V2& operator=(TomcatTA3V2&&) = default;
   
               //------------------------------------------------------------------
               // Member functions
               //------------------------------------------------------------------
   
               void init() override;
   
             protected:
               //------------------------------------------------------------------
               // Member functions
               //------------------------------------------------------------------
   
               std::unordered_map<std::string, std::shared_ptr<RandomVariableNode>>
               get_nodes() const override;
   
               std::vector<std::shared_ptr<NodeMetadata>>
               create_theta_s_metadatas() const override;
   
               std::vector<std::shared_ptr<CPD>>
               create_theta_s_prior_cpds() const override;
   
               std::shared_ptr<NodeMetadata> create_theta_q_prior_metadata() const;
   
               std::shared_ptr<NodeMetadata>
               create_theta_pbae_prior_metadata() const;
   
               std::vector<std::shared_ptr<NodeMetadata>>
               create_theta_pbae_metadatas() const;
   
               std::shared_ptr<NodeMetadata>
               create_training_condition_metadata() const;
   
               std::shared_ptr<NodeMetadata> create_pbae_metadata() const;
   
               std::shared_ptr<NodeMetadata> create_beep_metadata() const;
   
               std::shared_ptr<CPD> create_theta_q_prior_cpd() const;
   
               std::shared_ptr<CPD> create_theta_pbae_prior_prior_cpd() const;
   
               std::vector<std::shared_ptr<CPD>> create_theta_pbae_prior_cpds() const;
   
               std::shared_ptr<CPD> create_training_condition_prior_cpd(
                   std::shared_ptr<RandomVariableNode> theta_q_node) const;
   
               std::shared_ptr<CPD> create_pbae_prior_cpd(
                   std::shared_ptr<RandomVariableNode> theta_pbae_node) const;
   
               std::shared_ptr<CPD>
               create_beep_cpd(std::shared_ptr<NodeMetadata> pbae_metadata) const;
           };
   
       } // namespace model
   } // namespace tomcat

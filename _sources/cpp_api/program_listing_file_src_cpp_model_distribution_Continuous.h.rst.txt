
.. _program_listing_file_src_cpp_model_distribution_Continuous.h:

Program Listing for File Continuous.h
=====================================

|exhale_lsh| :ref:`Return to documentation for file <file_src_cpp_model_distribution_Continuous.h>` (``src/cpp/model/distribution/Continuous.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #pragma once
   
   #include "utils/Definitions.h"
   #include "pgm/Node.h"
   #include "distribution/Distribution.h"
   
   namespace tomcat {
       namespace model {
   
           class Continuous : public Distribution {
             public:
               //------------------------------------------------------------------
               // Constructors & Destructor
               //------------------------------------------------------------------
   
               Continuous();
   
               Continuous(std::vector<std::shared_ptr<Node>>& parameters);
   
               Continuous(std::vector<std::shared_ptr<Node>>&& parameters);
   
               virtual ~Continuous();
   
               //------------------------------------------------------------------
               // Copy & Move constructors/assignments
               //------------------------------------------------------------------
   
               // Copy constructor and assignment should be deleted to avoid
               // implicit slicing and loss of polymorphic behaviour in the
               // subclasses. To deep copy, the clone method must be used.
               Continuous(const Continuous&) = delete;
   
               Continuous& operator=(const Continuous&) = delete;
   
               Continuous(Continuous&&) = default;
   
               Continuous& operator=(Continuous&&) = default;
   
               //------------------------------------------------------------------
               // Member functions
               //------------------------------------------------------------------
   
               void update_sufficient_statistics(const Eigen::VectorXd& sample) override;
   
               Eigen::VectorXd get_values() const override;
   
             protected:
               //------------------------------------------------------------------
               // Member functions
               //------------------------------------------------------------------
               void update_dependencies(Node::NodeMap& parameter_nodes_map,
                                        int time_step) override;
   
               //------------------------------------------------------------------
               // Data members
               //------------------------------------------------------------------
   
               // The assignment of a node defines one of the parameters of the
               // distribution.
               std::vector<std::shared_ptr<Node>> parameters;
           };
   
       } // namespace model
   } // namespace tomcat

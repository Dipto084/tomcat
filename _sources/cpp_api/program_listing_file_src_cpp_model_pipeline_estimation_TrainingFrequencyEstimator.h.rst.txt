
.. _program_listing_file_src_cpp_model_pipeline_estimation_TrainingFrequencyEstimator.h:

Program Listing for File TrainingFrequencyEstimator.h
=====================================================

|exhale_lsh| :ref:`Return to documentation for file <file_src_cpp_model_pipeline_estimation_TrainingFrequencyEstimator.h>` (``src/cpp/model/pipeline/estimation/TrainingFrequencyEstimator.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #pragma once
   
   #include <unordered_set>
   
   #include "../../utils/Definitions.h"
   
   #include "Estimator.h"
   
   namespace tomcat {
       namespace model {
   
           class TrainingFrequencyEstimator : public Estimator {
             public:
               //------------------------------------------------------------------
               // Constructors & Destructor
               //------------------------------------------------------------------
   
               TrainingFrequencyEstimator(std::shared_ptr<DynamicBayesNet> model,
                                 int inference_horizon);
   
               ~TrainingFrequencyEstimator();
   
               //------------------------------------------------------------------
               // Copy & Move constructors/assignments
               //------------------------------------------------------------------
               TrainingFrequencyEstimator(const TrainingFrequencyEstimator& estimator);
   
               TrainingFrequencyEstimator& operator=(const TrainingFrequencyEstimator& estimator);
   
               TrainingFrequencyEstimator(TrainingFrequencyEstimator&&) = default;
   
               TrainingFrequencyEstimator& operator=(TrainingFrequencyEstimator&&) = default;
   
               //------------------------------------------------------------------
               // Member functions
               //------------------------------------------------------------------
               void estimate(EvidenceSet new_data) override;
   
               void get_info(nlohmann::json& json) const override;
   
               std::string get_name() const override;
   
           };
   
       } // namespace model
   } // namespace tomcat

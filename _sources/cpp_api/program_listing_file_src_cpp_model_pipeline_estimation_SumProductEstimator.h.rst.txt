
.. _program_listing_file_src_cpp_model_pipeline_estimation_SumProductEstimator.h:

Program Listing for File SumProductEstimator.h
==============================================

|exhale_lsh| :ref:`Return to documentation for file <file_src_cpp_model_pipeline_estimation_SumProductEstimator.h>` (``src/cpp/model/pipeline/estimation/SumProductEstimator.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #pragma once
   
   #include "../../utils/Definitions.h"
   
   #include "../../pgm/inference/FactorGraph.h"
   #include "Estimator.h"
   
   namespace tomcat {
       namespace model {
   
           class SumProductEstimator : public Estimator {
             public:
               //------------------------------------------------------------------
               // Constructors & Destructor
               //------------------------------------------------------------------
   
               SumProductEstimator(std::shared_ptr<DynamicBayesNet> model,
                                   int inference_horizon);
   
               ~SumProductEstimator();
   
               //------------------------------------------------------------------
               // Copy & Move constructors/assignments
               //------------------------------------------------------------------
               SumProductEstimator(const SumProductEstimator& estimator);
   
               SumProductEstimator&
               operator=(const SumProductEstimator& estimator);
   
               SumProductEstimator(SumProductEstimator&&) = default;
   
               SumProductEstimator& operator=(SumProductEstimator&&) = default;
   
               //------------------------------------------------------------------
               // Member functions
               //------------------------------------------------------------------
               void prepare() override;
   
               void estimate(EvidenceSet new_data) override;
   
               void get_info(nlohmann::json& json) const override;
   
               std::string get_name() const override;
   
               FactorGraph factor_graph;
   
             private:
               //------------------------------------------------------------------
               // Member functions
               //------------------------------------------------------------------
   
               void compute_forward_messages(const FactorGraph& factor_graph,
                                             int time_step,
                                             const EvidenceSet& new_data);
   
               void compute_backward_messages(const FactorGraph& factor_graph,
                                              int time_step,
                                              const EvidenceSet& new_data);
   
               Eigen::VectorXd get_predictions_for(const std::string& node_label,
                                                   int time_step,
                                                   int assignment,
                                                   int num_data_points);
   
               void add_column_to_estimates(NodeEstimates& estimates,
                                            const Eigen::VectorXd new_column);
   
               //------------------------------------------------------------------
               // Data members
               //------------------------------------------------------------------
   
               // Next time step to compute messages to the nodes in the factor
               // graph. Nodes with time steps before next_time_step already have
               // their messages computed.
               int next_time_step = 0;
           };
   
       } // namespace model
   } // namespace tomcat
